/*
 * Veritas Information Classifier (VIC)
 * APIs
 *
 * OpenAPI spec version: Resource Specific
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.ErrorResponse;
import io.swagger.client.model.JsonPatchDocument;
import io.swagger.client.model.MetadataDefinitionCollection;
import io.swagger.client.model.Pattern;
import io.swagger.client.model.PatternCollection;
import io.swagger.client.model.Policy;
import io.swagger.client.model.PolicyCollection;
import io.swagger.client.model.Tag;
import io.swagger.client.model.TagPropertyDefinitionCollection;
import io.swagger.client.model.TagsCollection;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class VeritasInformationClassifierVICApi {
    private ApiClient apiClient;

    public VeritasInformationClassifierVICApi() {
        this(Configuration.getDefaultApiClient());
    }

    public VeritasInformationClassifierVICApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for createOrUpdateTag */
    private com.squareup.okhttp.Call createOrUpdateTagCall(String tag, Tag body, String tenantId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/management/tags/{tag}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "tag" + "\\}", apiClient.escapeString(tag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (tenantId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "tenantId", tenantId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createOrUpdateTagValidateBeforeCall(String tag, Tag body, String tenantId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'tag' is set
        if (tag == null) {
            throw new ApiException("Missing the required parameter 'tag' when calling createOrUpdateTag(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createOrUpdateTag(Async)");
        }
        
        
        com.squareup.okhttp.Call call = createOrUpdateTagCall(tag, body, tenantId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create or update tag
     * Create or update a tag.
     * @param tag  (required)
     * @param body Tag (required)
     * @param tenantId The tenant identifier (optional, default to _Default)
     * @return Tag
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Tag createOrUpdateTag(String tag, Tag body, String tenantId) throws ApiException {
        ApiResponse<Tag> resp = createOrUpdateTagWithHttpInfo(tag, body, tenantId);
        return resp.getData();
    }

    /**
     * Create or update tag
     * Create or update a tag.
     * @param tag  (required)
     * @param body Tag (required)
     * @param tenantId The tenant identifier (optional, default to _Default)
     * @return ApiResponse&lt;Tag&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Tag> createOrUpdateTagWithHttpInfo(String tag, Tag body, String tenantId) throws ApiException {
        com.squareup.okhttp.Call call = createOrUpdateTagValidateBeforeCall(tag, body, tenantId, null, null);
        Type localVarReturnType = new TypeToken<Tag>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create or update tag (asynchronously)
     * Create or update a tag.
     * @param tag  (required)
     * @param body Tag (required)
     * @param tenantId The tenant identifier (optional, default to _Default)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createOrUpdateTagAsync(String tag, Tag body, String tenantId, final ApiCallback<Tag> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createOrUpdateTagValidateBeforeCall(tag, body, tenantId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Tag>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for createPattern */
    private com.squareup.okhttp.Call createPatternCall(Pattern body, String tenantId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/management/patterns".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (tenantId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "tenantId", tenantId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createPatternValidateBeforeCall(Pattern body, String tenantId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createPattern(Async)");
        }
        
        
        com.squareup.okhttp.Call call = createPatternCall(body, tenantId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create pattern
     * 
     * @param body New pattern (required)
     * @param tenantId The tenant identifier (optional, default to _Default)
     * @return Pattern
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Pattern createPattern(Pattern body, String tenantId) throws ApiException {
        ApiResponse<Pattern> resp = createPatternWithHttpInfo(body, tenantId);
        return resp.getData();
    }

    /**
     * Create pattern
     * 
     * @param body New pattern (required)
     * @param tenantId The tenant identifier (optional, default to _Default)
     * @return ApiResponse&lt;Pattern&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Pattern> createPatternWithHttpInfo(Pattern body, String tenantId) throws ApiException {
        com.squareup.okhttp.Call call = createPatternValidateBeforeCall(body, tenantId, null, null);
        Type localVarReturnType = new TypeToken<Pattern>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create pattern (asynchronously)
     * 
     * @param body New pattern (required)
     * @param tenantId The tenant identifier (optional, default to _Default)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createPatternAsync(Pattern body, String tenantId, final ApiCallback<Pattern> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createPatternValidateBeforeCall(body, tenantId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Pattern>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for createPolicy */
    private com.squareup.okhttp.Call createPolicyCall(Policy body, String tenantId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/management/policies".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (tenantId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "tenantId", tenantId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createPolicyValidateBeforeCall(Policy body, String tenantId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createPolicy(Async)");
        }
        
        
        com.squareup.okhttp.Call call = createPolicyCall(body, tenantId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create policy
     * Create a custom policy.
     * @param body New policy (required)
     * @param tenantId The tenant identifier (optional, default to _Default)
     * @return Policy
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Policy createPolicy(Policy body, String tenantId) throws ApiException {
        ApiResponse<Policy> resp = createPolicyWithHttpInfo(body, tenantId);
        return resp.getData();
    }

    /**
     * Create policy
     * Create a custom policy.
     * @param body New policy (required)
     * @param tenantId The tenant identifier (optional, default to _Default)
     * @return ApiResponse&lt;Policy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Policy> createPolicyWithHttpInfo(Policy body, String tenantId) throws ApiException {
        com.squareup.okhttp.Call call = createPolicyValidateBeforeCall(body, tenantId, null, null);
        Type localVarReturnType = new TypeToken<Policy>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create policy (asynchronously)
     * Create a custom policy.
     * @param body New policy (required)
     * @param tenantId The tenant identifier (optional, default to _Default)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createPolicyAsync(Policy body, String tenantId, final ApiCallback<Policy> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createPolicyValidateBeforeCall(body, tenantId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Policy>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for deletePattern */
    private com.squareup.okhttp.Call deletePatternCall(String id, String tenantId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/management/patterns/{id}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (tenantId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "tenantId", tenantId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deletePatternValidateBeforeCall(String id, String tenantId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deletePattern(Async)");
        }
        
        
        com.squareup.okhttp.Call call = deletePatternCall(id, tenantId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete pattern
     * 
     * @param id The pattern identifier (required)
     * @param tenantId The tenant identifier (optional, default to _Default)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deletePattern(String id, String tenantId) throws ApiException {
        deletePatternWithHttpInfo(id, tenantId);
    }

    /**
     * Delete pattern
     * 
     * @param id The pattern identifier (required)
     * @param tenantId The tenant identifier (optional, default to _Default)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deletePatternWithHttpInfo(String id, String tenantId) throws ApiException {
        com.squareup.okhttp.Call call = deletePatternValidateBeforeCall(id, tenantId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete pattern (asynchronously)
     * 
     * @param id The pattern identifier (required)
     * @param tenantId The tenant identifier (optional, default to _Default)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deletePatternAsync(String id, String tenantId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deletePatternValidateBeforeCall(id, tenantId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for deletePolicy */
    private com.squareup.okhttp.Call deletePolicyCall(String id, String tenantId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/management/policies/{id}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (tenantId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "tenantId", tenantId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deletePolicyValidateBeforeCall(String id, String tenantId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deletePolicy(Async)");
        }
        
        
        com.squareup.okhttp.Call call = deletePolicyCall(id, tenantId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete policy
     * Delete a custom policy.
     * @param id The policy identifier (required)
     * @param tenantId The tenant identifier (optional, default to _Default)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deletePolicy(String id, String tenantId) throws ApiException {
        deletePolicyWithHttpInfo(id, tenantId);
    }

    /**
     * Delete policy
     * Delete a custom policy.
     * @param id The policy identifier (required)
     * @param tenantId The tenant identifier (optional, default to _Default)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deletePolicyWithHttpInfo(String id, String tenantId) throws ApiException {
        com.squareup.okhttp.Call call = deletePolicyValidateBeforeCall(id, tenantId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete policy (asynchronously)
     * Delete a custom policy.
     * @param id The policy identifier (required)
     * @param tenantId The tenant identifier (optional, default to _Default)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deletePolicyAsync(String id, String tenantId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deletePolicyValidateBeforeCall(id, tenantId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for deleteTag */
    private com.squareup.okhttp.Call deleteTagCall(String tag, String tenantId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/management/tags/{tag}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "tag" + "\\}", apiClient.escapeString(tag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (tenantId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "tenantId", tenantId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteTagValidateBeforeCall(String tag, String tenantId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'tag' is set
        if (tag == null) {
            throw new ApiException("Missing the required parameter 'tag' when calling deleteTag(Async)");
        }
        
        
        com.squareup.okhttp.Call call = deleteTagCall(tag, tenantId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete tag
     * Delete a custom tag.  (Built-in tags cannot be deleted.)
     * @param tag  (required)
     * @param tenantId The tenant identifier (optional, default to _Default)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteTag(String tag, String tenantId) throws ApiException {
        deleteTagWithHttpInfo(tag, tenantId);
    }

    /**
     * Delete tag
     * Delete a custom tag.  (Built-in tags cannot be deleted.)
     * @param tag  (required)
     * @param tenantId The tenant identifier (optional, default to _Default)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteTagWithHttpInfo(String tag, String tenantId) throws ApiException {
        com.squareup.okhttp.Call call = deleteTagValidateBeforeCall(tag, tenantId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete tag (asynchronously)
     * Delete a custom tag.  (Built-in tags cannot be deleted.)
     * @param tag  (required)
     * @param tenantId The tenant identifier (optional, default to _Default)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteTagAsync(String tag, String tenantId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteTagValidateBeforeCall(tag, tenantId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for getMetadataDefinitions */
    private com.squareup.okhttp.Call getMetadataDefinitionsCall(String tenantId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/management/policies/metadata".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (tenantId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "tenantId", tenantId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getMetadataDefinitionsValidateBeforeCall(String tenantId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = getMetadataDefinitionsCall(tenantId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List metadata definitions
     * 
     * @param tenantId The tenant identifier (optional, default to _Default)
     * @return MetadataDefinitionCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public MetadataDefinitionCollection getMetadataDefinitions(String tenantId) throws ApiException {
        ApiResponse<MetadataDefinitionCollection> resp = getMetadataDefinitionsWithHttpInfo(tenantId);
        return resp.getData();
    }

    /**
     * List metadata definitions
     * 
     * @param tenantId The tenant identifier (optional, default to _Default)
     * @return ApiResponse&lt;MetadataDefinitionCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<MetadataDefinitionCollection> getMetadataDefinitionsWithHttpInfo(String tenantId) throws ApiException {
        com.squareup.okhttp.Call call = getMetadataDefinitionsValidateBeforeCall(tenantId, null, null);
        Type localVarReturnType = new TypeToken<MetadataDefinitionCollection>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List metadata definitions (asynchronously)
     * 
     * @param tenantId The tenant identifier (optional, default to _Default)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getMetadataDefinitionsAsync(String tenantId, final ApiCallback<MetadataDefinitionCollection> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getMetadataDefinitionsValidateBeforeCall(tenantId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<MetadataDefinitionCollection>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getPattern */
    private com.squareup.okhttp.Call getPatternCall(String id, String tenantId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/management/patterns/{id}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (tenantId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "tenantId", tenantId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPatternValidateBeforeCall(String id, String tenantId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getPattern(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getPatternCall(id, tenantId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get pattern
     * 
     * @param id The pattern identifier (required)
     * @param tenantId The tenant identifier (optional, default to _Default)
     * @return Pattern
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Pattern getPattern(String id, String tenantId) throws ApiException {
        ApiResponse<Pattern> resp = getPatternWithHttpInfo(id, tenantId);
        return resp.getData();
    }

    /**
     * Get pattern
     * 
     * @param id The pattern identifier (required)
     * @param tenantId The tenant identifier (optional, default to _Default)
     * @return ApiResponse&lt;Pattern&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Pattern> getPatternWithHttpInfo(String id, String tenantId) throws ApiException {
        com.squareup.okhttp.Call call = getPatternValidateBeforeCall(id, tenantId, null, null);
        Type localVarReturnType = new TypeToken<Pattern>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get pattern (asynchronously)
     * 
     * @param id The pattern identifier (required)
     * @param tenantId The tenant identifier (optional, default to _Default)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPatternAsync(String id, String tenantId, final ApiCallback<Pattern> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPatternValidateBeforeCall(id, tenantId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Pattern>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getPatternCollection */
    private com.squareup.okhttp.Call getPatternCollectionCall(String tenantId, String ifNoneMatch, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/management/patterns".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (tenantId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "tenantId", tenantId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (ifNoneMatch != null)
        localVarHeaderParams.put("If-None-Match", apiClient.parameterToString(ifNoneMatch));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPatternCollectionValidateBeforeCall(String tenantId, String ifNoneMatch, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = getPatternCollectionCall(tenantId, ifNoneMatch, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List patterns
     * 
     * @param tenantId The tenant identifier (optional, default to _Default)
     * @param ifNoneMatch  (optional)
     * @return PatternCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PatternCollection getPatternCollection(String tenantId, String ifNoneMatch) throws ApiException {
        ApiResponse<PatternCollection> resp = getPatternCollectionWithHttpInfo(tenantId, ifNoneMatch);
        return resp.getData();
    }

    /**
     * List patterns
     * 
     * @param tenantId The tenant identifier (optional, default to _Default)
     * @param ifNoneMatch  (optional)
     * @return ApiResponse&lt;PatternCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PatternCollection> getPatternCollectionWithHttpInfo(String tenantId, String ifNoneMatch) throws ApiException {
        com.squareup.okhttp.Call call = getPatternCollectionValidateBeforeCall(tenantId, ifNoneMatch, null, null);
        Type localVarReturnType = new TypeToken<PatternCollection>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List patterns (asynchronously)
     * 
     * @param tenantId The tenant identifier (optional, default to _Default)
     * @param ifNoneMatch  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPatternCollectionAsync(String tenantId, String ifNoneMatch, final ApiCallback<PatternCollection> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPatternCollectionValidateBeforeCall(tenantId, ifNoneMatch, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PatternCollection>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getPoliciesByPattern */
    private com.squareup.okhttp.Call getPoliciesByPatternCall(String id, String tenantId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/management/patterns/{id}/policies".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (tenantId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "tenantId", tenantId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPoliciesByPatternValidateBeforeCall(String id, String tenantId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getPoliciesByPattern(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getPoliciesByPatternCall(id, tenantId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List policies that use a pattern
     * 
     * @param id  (required)
     * @param tenantId The tenant identifier (optional, default to _Default)
     * @return PolicyCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PolicyCollection getPoliciesByPattern(String id, String tenantId) throws ApiException {
        ApiResponse<PolicyCollection> resp = getPoliciesByPatternWithHttpInfo(id, tenantId);
        return resp.getData();
    }

    /**
     * List policies that use a pattern
     * 
     * @param id  (required)
     * @param tenantId The tenant identifier (optional, default to _Default)
     * @return ApiResponse&lt;PolicyCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PolicyCollection> getPoliciesByPatternWithHttpInfo(String id, String tenantId) throws ApiException {
        com.squareup.okhttp.Call call = getPoliciesByPatternValidateBeforeCall(id, tenantId, null, null);
        Type localVarReturnType = new TypeToken<PolicyCollection>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List policies that use a pattern (asynchronously)
     * 
     * @param id  (required)
     * @param tenantId The tenant identifier (optional, default to _Default)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPoliciesByPatternAsync(String id, String tenantId, final ApiCallback<PolicyCollection> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPoliciesByPatternValidateBeforeCall(id, tenantId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PolicyCollection>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getPoliciesByTag */
    private com.squareup.okhttp.Call getPoliciesByTagCall(String tag, String tenantId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/management/tags/{tag}/policies".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "tag" + "\\}", apiClient.escapeString(tag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (tenantId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "tenantId", tenantId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPoliciesByTagValidateBeforeCall(String tag, String tenantId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'tag' is set
        if (tag == null) {
            throw new ApiException("Missing the required parameter 'tag' when calling getPoliciesByTag(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getPoliciesByTagCall(tag, tenantId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List policies that use a tag
     * 
     * @param tag  (required)
     * @param tenantId The tenant identifier (optional, default to _Default)
     * @return PolicyCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PolicyCollection getPoliciesByTag(String tag, String tenantId) throws ApiException {
        ApiResponse<PolicyCollection> resp = getPoliciesByTagWithHttpInfo(tag, tenantId);
        return resp.getData();
    }

    /**
     * List policies that use a tag
     * 
     * @param tag  (required)
     * @param tenantId The tenant identifier (optional, default to _Default)
     * @return ApiResponse&lt;PolicyCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PolicyCollection> getPoliciesByTagWithHttpInfo(String tag, String tenantId) throws ApiException {
        com.squareup.okhttp.Call call = getPoliciesByTagValidateBeforeCall(tag, tenantId, null, null);
        Type localVarReturnType = new TypeToken<PolicyCollection>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List policies that use a tag (asynchronously)
     * 
     * @param tag  (required)
     * @param tenantId The tenant identifier (optional, default to _Default)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPoliciesByTagAsync(String tag, String tenantId, final ApiCallback<PolicyCollection> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPoliciesByTagValidateBeforeCall(tag, tenantId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PolicyCollection>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getPolicy */
    private com.squareup.okhttp.Call getPolicyCall(String id, String tenantId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/management/policies/{id}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (tenantId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "tenantId", tenantId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPolicyValidateBeforeCall(String id, String tenantId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getPolicy(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getPolicyCall(id, tenantId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get policy
     * Retrieve a policy
     * @param id The policy identifier (required)
     * @param tenantId The tenant identifier (optional, default to _Default)
     * @return Policy
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Policy getPolicy(String id, String tenantId) throws ApiException {
        ApiResponse<Policy> resp = getPolicyWithHttpInfo(id, tenantId);
        return resp.getData();
    }

    /**
     * Get policy
     * Retrieve a policy
     * @param id The policy identifier (required)
     * @param tenantId The tenant identifier (optional, default to _Default)
     * @return ApiResponse&lt;Policy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Policy> getPolicyWithHttpInfo(String id, String tenantId) throws ApiException {
        com.squareup.okhttp.Call call = getPolicyValidateBeforeCall(id, tenantId, null, null);
        Type localVarReturnType = new TypeToken<Policy>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get policy (asynchronously)
     * Retrieve a policy
     * @param id The policy identifier (required)
     * @param tenantId The tenant identifier (optional, default to _Default)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPolicyAsync(String id, String tenantId, final ApiCallback<Policy> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPolicyValidateBeforeCall(id, tenantId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Policy>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getPolicyCollection */
    private com.squareup.okhttp.Call getPolicyCollectionCall(String tenantId, Boolean includeDisabled, Boolean includeEngineBody, String ifNoneMatch, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/management/policies".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (tenantId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "tenantId", tenantId));
        if (includeDisabled != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "includeDisabled", includeDisabled));
        if (includeEngineBody != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "includeEngineBody", includeEngineBody));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (ifNoneMatch != null)
        localVarHeaderParams.put("If-None-Match", apiClient.parameterToString(ifNoneMatch));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPolicyCollectionValidateBeforeCall(String tenantId, Boolean includeDisabled, Boolean includeEngineBody, String ifNoneMatch, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = getPolicyCollectionCall(tenantId, includeDisabled, includeEngineBody, ifNoneMatch, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List policies
     * Retrieve the policies for a tenant.
     * @param tenantId The tenant identifier (optional, default to _Default)
     * @param includeDisabled Include disabled policies (as well as enabled ones) (optional)
     * @param includeEngineBody Include the engine body for policies, and the engine rule sets. (optional)
     * @param ifNoneMatch  (optional)
     * @return PolicyCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PolicyCollection getPolicyCollection(String tenantId, Boolean includeDisabled, Boolean includeEngineBody, String ifNoneMatch) throws ApiException {
        ApiResponse<PolicyCollection> resp = getPolicyCollectionWithHttpInfo(tenantId, includeDisabled, includeEngineBody, ifNoneMatch);
        return resp.getData();
    }

    /**
     * List policies
     * Retrieve the policies for a tenant.
     * @param tenantId The tenant identifier (optional, default to _Default)
     * @param includeDisabled Include disabled policies (as well as enabled ones) (optional)
     * @param includeEngineBody Include the engine body for policies, and the engine rule sets. (optional)
     * @param ifNoneMatch  (optional)
     * @return ApiResponse&lt;PolicyCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PolicyCollection> getPolicyCollectionWithHttpInfo(String tenantId, Boolean includeDisabled, Boolean includeEngineBody, String ifNoneMatch) throws ApiException {
        com.squareup.okhttp.Call call = getPolicyCollectionValidateBeforeCall(tenantId, includeDisabled, includeEngineBody, ifNoneMatch, null, null);
        Type localVarReturnType = new TypeToken<PolicyCollection>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List policies (asynchronously)
     * Retrieve the policies for a tenant.
     * @param tenantId The tenant identifier (optional, default to _Default)
     * @param includeDisabled Include disabled policies (as well as enabled ones) (optional)
     * @param includeEngineBody Include the engine body for policies, and the engine rule sets. (optional)
     * @param ifNoneMatch  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPolicyCollectionAsync(String tenantId, Boolean includeDisabled, Boolean includeEngineBody, String ifNoneMatch, final ApiCallback<PolicyCollection> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPolicyCollectionValidateBeforeCall(tenantId, includeDisabled, includeEngineBody, ifNoneMatch, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PolicyCollection>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getTag */
    private com.squareup.okhttp.Call getTagCall(String tag, String tenantId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/management/tags/{tag}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "tag" + "\\}", apiClient.escapeString(tag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (tenantId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "tenantId", tenantId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTagValidateBeforeCall(String tag, String tenantId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'tag' is set
        if (tag == null) {
            throw new ApiException("Missing the required parameter 'tag' when calling getTag(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getTagCall(tag, tenantId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get tag
     * Get a tag.
     * @param tag  (required)
     * @param tenantId The tenant identifier (optional, default to _Default)
     * @return Tag
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Tag getTag(String tag, String tenantId) throws ApiException {
        ApiResponse<Tag> resp = getTagWithHttpInfo(tag, tenantId);
        return resp.getData();
    }

    /**
     * Get tag
     * Get a tag.
     * @param tag  (required)
     * @param tenantId The tenant identifier (optional, default to _Default)
     * @return ApiResponse&lt;Tag&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Tag> getTagWithHttpInfo(String tag, String tenantId) throws ApiException {
        com.squareup.okhttp.Call call = getTagValidateBeforeCall(tag, tenantId, null, null);
        Type localVarReturnType = new TypeToken<Tag>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get tag (asynchronously)
     * Get a tag.
     * @param tag  (required)
     * @param tenantId The tenant identifier (optional, default to _Default)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTagAsync(String tag, String tenantId, final ApiCallback<Tag> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTagValidateBeforeCall(tag, tenantId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Tag>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getTagPropertyDefinitions */
    private com.squareup.okhttp.Call getTagPropertyDefinitionsCall(String tenantId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/management/tags/propertyDefinitions".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (tenantId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "tenantId", tenantId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTagPropertyDefinitionsValidateBeforeCall(String tenantId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = getTagPropertyDefinitionsCall(tenantId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List tag property definitions
     * Get definitions of properties that can be associated with a tag. This is useful, for example, for user interfaces that need to know the supported values for such properties. Generally the tag properties are application-specific and not part of the core service functionality.
     * @param tenantId The tenant identifier (optional, default to _Default)
     * @return TagPropertyDefinitionCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TagPropertyDefinitionCollection getTagPropertyDefinitions(String tenantId) throws ApiException {
        ApiResponse<TagPropertyDefinitionCollection> resp = getTagPropertyDefinitionsWithHttpInfo(tenantId);
        return resp.getData();
    }

    /**
     * List tag property definitions
     * Get definitions of properties that can be associated with a tag. This is useful, for example, for user interfaces that need to know the supported values for such properties. Generally the tag properties are application-specific and not part of the core service functionality.
     * @param tenantId The tenant identifier (optional, default to _Default)
     * @return ApiResponse&lt;TagPropertyDefinitionCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TagPropertyDefinitionCollection> getTagPropertyDefinitionsWithHttpInfo(String tenantId) throws ApiException {
        com.squareup.okhttp.Call call = getTagPropertyDefinitionsValidateBeforeCall(tenantId, null, null);
        Type localVarReturnType = new TypeToken<TagPropertyDefinitionCollection>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List tag property definitions (asynchronously)
     * Get definitions of properties that can be associated with a tag. This is useful, for example, for user interfaces that need to know the supported values for such properties. Generally the tag properties are application-specific and not part of the core service functionality.
     * @param tenantId The tenant identifier (optional, default to _Default)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTagPropertyDefinitionsAsync(String tenantId, final ApiCallback<TagPropertyDefinitionCollection> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTagPropertyDefinitionsValidateBeforeCall(tenantId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TagPropertyDefinitionCollection>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getTagsCollection */
    private com.squareup.okhttp.Call getTagsCollectionCall(String tenantId, String ifNoneMatch, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/management/tags".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (tenantId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "tenantId", tenantId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (ifNoneMatch != null)
        localVarHeaderParams.put("If-None-Match", apiClient.parameterToString(ifNoneMatch));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTagsCollectionValidateBeforeCall(String tenantId, String ifNoneMatch, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = getTagsCollectionCall(tenantId, ifNoneMatch, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List tags
     * Retrieve all of the tags for a tenant.
     * @param tenantId The tenant identifier (optional, default to _Default)
     * @param ifNoneMatch  (optional)
     * @return TagsCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TagsCollection getTagsCollection(String tenantId, String ifNoneMatch) throws ApiException {
        ApiResponse<TagsCollection> resp = getTagsCollectionWithHttpInfo(tenantId, ifNoneMatch);
        return resp.getData();
    }

    /**
     * List tags
     * Retrieve all of the tags for a tenant.
     * @param tenantId The tenant identifier (optional, default to _Default)
     * @param ifNoneMatch  (optional)
     * @return ApiResponse&lt;TagsCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TagsCollection> getTagsCollectionWithHttpInfo(String tenantId, String ifNoneMatch) throws ApiException {
        com.squareup.okhttp.Call call = getTagsCollectionValidateBeforeCall(tenantId, ifNoneMatch, null, null);
        Type localVarReturnType = new TypeToken<TagsCollection>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List tags (asynchronously)
     * Retrieve all of the tags for a tenant.
     * @param tenantId The tenant identifier (optional, default to _Default)
     * @param ifNoneMatch  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTagsCollectionAsync(String tenantId, String ifNoneMatch, final ApiCallback<TagsCollection> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTagsCollectionValidateBeforeCall(tenantId, ifNoneMatch, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TagsCollection>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for patchPolicy */
    private com.squareup.okhttp.Call patchPolicyCall(String id, List<JsonPatchDocument> patch, String tenantId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = patch;
        
        // create path and map variables
        String localVarPath = "/management/policies/{id}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (tenantId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "tenantId", tenantId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/json-patch+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call patchPolicyValidateBeforeCall(String id, List<JsonPatchDocument> patch, String tenantId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling patchPolicy(Async)");
        }
        
        // verify the required parameter 'patch' is set
        if (patch == null) {
            throw new ApiException("Missing the required parameter 'patch' when calling patchPolicy(Async)");
        }
        
        
        com.squareup.okhttp.Call call = patchPolicyCall(id, patch, tenantId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Patch policy
     * Update part of a policy.
     * @param id The policy identifier (required)
     * @param patch A patch containing instructions for how the policy should be modified. See RFC 6902. (required)
     * @param tenantId The tenant identifier (optional, default to _Default)
     * @return Policy
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Policy patchPolicy(String id, List<JsonPatchDocument> patch, String tenantId) throws ApiException {
        ApiResponse<Policy> resp = patchPolicyWithHttpInfo(id, patch, tenantId);
        return resp.getData();
    }

    /**
     * Patch policy
     * Update part of a policy.
     * @param id The policy identifier (required)
     * @param patch A patch containing instructions for how the policy should be modified. See RFC 6902. (required)
     * @param tenantId The tenant identifier (optional, default to _Default)
     * @return ApiResponse&lt;Policy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Policy> patchPolicyWithHttpInfo(String id, List<JsonPatchDocument> patch, String tenantId) throws ApiException {
        com.squareup.okhttp.Call call = patchPolicyValidateBeforeCall(id, patch, tenantId, null, null);
        Type localVarReturnType = new TypeToken<Policy>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Patch policy (asynchronously)
     * Update part of a policy.
     * @param id The policy identifier (required)
     * @param patch A patch containing instructions for how the policy should be modified. See RFC 6902. (required)
     * @param tenantId The tenant identifier (optional, default to _Default)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call patchPolicyAsync(String id, List<JsonPatchDocument> patch, String tenantId, final ApiCallback<Policy> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = patchPolicyValidateBeforeCall(id, patch, tenantId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Policy>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for resetPolicy */
    private com.squareup.okhttp.Call resetPolicyCall(String id, String tenantId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/management/policies/{id}/overrides".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (tenantId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "tenantId", tenantId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call resetPolicyValidateBeforeCall(String id, String tenantId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling resetPolicy(Async)");
        }
        
        
        com.squareup.okhttp.Call call = resetPolicyCall(id, tenantId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Reset policy to defaults
     * Reset a policy to its default settings.  Only valid for built-in policies.
     * @param id The policy identifier (required)
     * @param tenantId The tenant identifier (optional, default to _Default)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void resetPolicy(String id, String tenantId) throws ApiException {
        resetPolicyWithHttpInfo(id, tenantId);
    }

    /**
     * Reset policy to defaults
     * Reset a policy to its default settings.  Only valid for built-in policies.
     * @param id The policy identifier (required)
     * @param tenantId The tenant identifier (optional, default to _Default)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> resetPolicyWithHttpInfo(String id, String tenantId) throws ApiException {
        com.squareup.okhttp.Call call = resetPolicyValidateBeforeCall(id, tenantId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Reset policy to defaults (asynchronously)
     * Reset a policy to its default settings.  Only valid for built-in policies.
     * @param id The policy identifier (required)
     * @param tenantId The tenant identifier (optional, default to _Default)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call resetPolicyAsync(String id, String tenantId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = resetPolicyValidateBeforeCall(id, tenantId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for updatePattern */
    private com.squareup.okhttp.Call updatePatternCall(String id, Pattern body, String tenantId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/management/patterns/{id}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (tenantId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "tenantId", tenantId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updatePatternValidateBeforeCall(String id, Pattern body, String tenantId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updatePattern(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updatePattern(Async)");
        }
        
        
        com.squareup.okhttp.Call call = updatePatternCall(id, body, tenantId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update pattern
     * 
     * @param id The pattern identifier (required)
     * @param body Updated pattern (required)
     * @param tenantId The tenant identifier (optional, default to _Default)
     * @return Pattern
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Pattern updatePattern(String id, Pattern body, String tenantId) throws ApiException {
        ApiResponse<Pattern> resp = updatePatternWithHttpInfo(id, body, tenantId);
        return resp.getData();
    }

    /**
     * Update pattern
     * 
     * @param id The pattern identifier (required)
     * @param body Updated pattern (required)
     * @param tenantId The tenant identifier (optional, default to _Default)
     * @return ApiResponse&lt;Pattern&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Pattern> updatePatternWithHttpInfo(String id, Pattern body, String tenantId) throws ApiException {
        com.squareup.okhttp.Call call = updatePatternValidateBeforeCall(id, body, tenantId, null, null);
        Type localVarReturnType = new TypeToken<Pattern>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update pattern (asynchronously)
     * 
     * @param id The pattern identifier (required)
     * @param body Updated pattern (required)
     * @param tenantId The tenant identifier (optional, default to _Default)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updatePatternAsync(String id, Pattern body, String tenantId, final ApiCallback<Pattern> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updatePatternValidateBeforeCall(id, body, tenantId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Pattern>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for updatePolicy */
    private com.squareup.okhttp.Call updatePolicyCall(String id, Policy body, String tenantId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/management/policies/{id}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (tenantId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "tenantId", tenantId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updatePolicyValidateBeforeCall(String id, Policy body, String tenantId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updatePolicy(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updatePolicy(Async)");
        }
        
        
        com.squareup.okhttp.Call call = updatePolicyCall(id, body, tenantId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update policy
     * Update a policy.
     * @param id The policy identifier (required)
     * @param body Updated policy (required)
     * @param tenantId The tenant identifier (optional, default to _Default)
     * @return Policy
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Policy updatePolicy(String id, Policy body, String tenantId) throws ApiException {
        ApiResponse<Policy> resp = updatePolicyWithHttpInfo(id, body, tenantId);
        return resp.getData();
    }

    /**
     * Update policy
     * Update a policy.
     * @param id The policy identifier (required)
     * @param body Updated policy (required)
     * @param tenantId The tenant identifier (optional, default to _Default)
     * @return ApiResponse&lt;Policy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Policy> updatePolicyWithHttpInfo(String id, Policy body, String tenantId) throws ApiException {
        com.squareup.okhttp.Call call = updatePolicyValidateBeforeCall(id, body, tenantId, null, null);
        Type localVarReturnType = new TypeToken<Policy>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update policy (asynchronously)
     * Update a policy.
     * @param id The policy identifier (required)
     * @param body Updated policy (required)
     * @param tenantId The tenant identifier (optional, default to _Default)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updatePolicyAsync(String id, Policy body, String tenantId, final ApiCallback<Policy> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updatePolicyValidateBeforeCall(id, body, tenantId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Policy>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
