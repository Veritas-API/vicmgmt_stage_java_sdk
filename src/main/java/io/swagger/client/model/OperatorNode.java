/*
 * Veritas Information Classifier (VIC)
 * APIs
 *
 * OpenAPI spec version: Resource Specific
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.client.model.Node;
import java.util.ArrayList;
import java.util.List;

/**
 * OperatorNode
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2017-04-12T23:02:37.653Z")
public class OperatorNode {
  /**
   * Determines whether this node is a condition node or an operator node. NOTE: If ConditionNode & OperatorNode are not visible in the Swagger UI, please consult the Swagger json for details.
   */
  public enum TypeEnum {
    @SerializedName("condition")
    CONDITION("condition"),
    
    @SerializedName("operator")
    OPERATOR("operator");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
  }

  @SerializedName("type")
  private TypeEnum type = null;

  /**
   * Gets or Sets operator
   */
  public enum OperatorEnum {
    @SerializedName("AND")
    AND("AND"),
    
    @SerializedName("OR")
    OR("OR"),
    
    @SerializedName("NOT")
    NOT("NOT");

    private String value;

    OperatorEnum(String value) {
      this.value = value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
  }

  @SerializedName("operator")
  private OperatorEnum operator = null;

  @SerializedName("min")
  private Integer min = null;

  @SerializedName("minOverridden")
  private Boolean minOverridden = null;

  @SerializedName("proximity")
  private Integer proximity = null;

  /**
   * Gets or Sets proximityMode
   */
  public enum ProximityModeEnum {
    @SerializedName("FromFirstCondition")
    FROMFIRSTCONDITION("FromFirstCondition"),
    
    @SerializedName("SlidingWindow")
    SLIDINGWINDOW("SlidingWindow");

    private String value;

    ProximityModeEnum(String value) {
      this.value = value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
  }

  @SerializedName("proximityMode")
  private ProximityModeEnum proximityMode = null;

  @SerializedName("earlyOut")
  private Boolean earlyOut = null;

  @SerializedName("children")
  private List<Node> children = new ArrayList<Node>();

  public OperatorNode type(TypeEnum type) {
    this.type = type;
    return this;
  }

   /**
   * Determines whether this node is a condition node or an operator node. NOTE: If ConditionNode & OperatorNode are not visible in the Swagger UI, please consult the Swagger json for details.
   * @return type
  **/
  @ApiModelProperty(example = "null", required = true, value = "Determines whether this node is a condition node or an operator node. NOTE: If ConditionNode & OperatorNode are not visible in the Swagger UI, please consult the Swagger json for details.")
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }

  public OperatorNode operator(OperatorEnum operator) {
    this.operator = operator;
    return this;
  }

   /**
   * Get operator
   * @return operator
  **/
  @ApiModelProperty(example = "null", value = "")
  public OperatorEnum getOperator() {
    return operator;
  }

  public void setOperator(OperatorEnum operator) {
    this.operator = operator;
  }

  public OperatorNode min(Integer min) {
    this.min = min;
    return this;
  }

   /**
   * The minimum number of child nodes that must match.  Only applies if the operator is OR.
   * @return min
  **/
  @ApiModelProperty(example = "null", value = "The minimum number of child nodes that must match.  Only applies if the operator is OR.")
  public Integer getMin() {
    return min;
  }

  public void setMin(Integer min) {
    this.min = min;
  }

  public OperatorNode minOverridden(Boolean minOverridden) {
    this.minOverridden = minOverridden;
    return this;
  }

   /**
   * Get minOverridden
   * @return minOverridden
  **/
  @ApiModelProperty(example = "null", value = "")
  public Boolean getMinOverridden() {
    return minOverridden;
  }

  public void setMinOverridden(Boolean minOverridden) {
    this.minOverridden = minOverridden;
  }

  public OperatorNode proximity(Integer proximity) {
    this.proximity = proximity;
    return this;
  }

   /**
   * Optional proximity of the first child condition to the other child conditions.  If specified, the operator must be AND, and the child nodes must all be conditions (no operators).  There must be at least two child conditions and they must all be keyword or regex.  The child conditions must not have a minCount greater than 1, and must apply to the full content (not metadata fields).
   * @return proximity
  **/
  @ApiModelProperty(example = "null", value = "Optional proximity of the first child condition to the other child conditions.  If specified, the operator must be AND, and the child nodes must all be conditions (no operators).  There must be at least two child conditions and they must all be keyword or regex.  The child conditions must not have a minCount greater than 1, and must apply to the full content (not metadata fields).")
  public Integer getProximity() {
    return proximity;
  }

  public void setProximity(Integer proximity) {
    this.proximity = proximity;
  }

  public OperatorNode proximityMode(ProximityModeEnum proximityMode) {
    this.proximityMode = proximityMode;
    return this;
  }

   /**
   * Get proximityMode
   * @return proximityMode
  **/
  @ApiModelProperty(example = "null", value = "")
  public ProximityModeEnum getProximityMode() {
    return proximityMode;
  }

  public void setProximityMode(ProximityModeEnum proximityMode) {
    this.proximityMode = proximityMode;
  }

  public OperatorNode earlyOut(Boolean earlyOut) {
    this.earlyOut = earlyOut;
    return this;
  }

   /**
   * Get earlyOut
   * @return earlyOut
  **/
  @ApiModelProperty(example = "null", value = "")
  public Boolean getEarlyOut() {
    return earlyOut;
  }

  public void setEarlyOut(Boolean earlyOut) {
    this.earlyOut = earlyOut;
  }

  public OperatorNode children(List<Node> children) {
    this.children = children;
    return this;
  }

  public OperatorNode addChildrenItem(Node childrenItem) {
    this.children.add(childrenItem);
    return this;
  }

   /**
   * Get children
   * @return children
  **/
  @ApiModelProperty(example = "null", value = "")
  public List<Node> getChildren() {
    return children;
  }

  public void setChildren(List<Node> children) {
    this.children = children;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OperatorNode operatorNode = (OperatorNode) o;
    return Objects.equals(this.type, operatorNode.type) &&
        Objects.equals(this.operator, operatorNode.operator) &&
        Objects.equals(this.min, operatorNode.min) &&
        Objects.equals(this.minOverridden, operatorNode.minOverridden) &&
        Objects.equals(this.proximity, operatorNode.proximity) &&
        Objects.equals(this.proximityMode, operatorNode.proximityMode) &&
        Objects.equals(this.earlyOut, operatorNode.earlyOut) &&
        Objects.equals(this.children, operatorNode.children);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, operator, min, minOverridden, proximity, proximityMode, earlyOut, children);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OperatorNode {\n");
    
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    operator: ").append(toIndentedString(operator)).append("\n");
    sb.append("    min: ").append(toIndentedString(min)).append("\n");
    sb.append("    minOverridden: ").append(toIndentedString(minOverridden)).append("\n");
    sb.append("    proximity: ").append(toIndentedString(proximity)).append("\n");
    sb.append("    proximityMode: ").append(toIndentedString(proximityMode)).append("\n");
    sb.append("    earlyOut: ").append(toIndentedString(earlyOut)).append("\n");
    sb.append("    children: ").append(toIndentedString(children)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
}

